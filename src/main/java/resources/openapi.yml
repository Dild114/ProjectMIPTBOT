openapi: 3.0.0
info:
  title: App API
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /sites:
    get:
      summary: Get a list of all sites
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sites'
    post:
      summary: Add site
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sites'
      responses:
        '201':
          description: Sites added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sites'
    delete:
      summary: Delete all sites
      responses:
        '204':
          description: All sites deleted successfully

  /sites/{id}:
    get:
      summary: Get a specific site by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the site to retrieve
          schema:
            type: String
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sites'
        '404':
          description: Site not found
    delete:
      summary: Delete a specific site by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the site to delete
      responses:
        '204':
          description: Site deleted successfully
        '404':
          description: Site not found

  /categories:
    get:
      summary: Get a list of all categories
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Add category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      summary: Delete all categories
      responses:
        '204':
          description: All categories deleted successfully

  /categories/{name}:
    post:
      summary: Add user category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'

  /categories/{id}:
    get:
      summary: Get a specific category by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the category to retrieve
          schema:
            type: String
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    delete:
      summary: Delete a specific category by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the category to delete
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found


  /signup:
    post:
      summary: Add account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          description: Account successfully created

components:
  schemas:
    Category:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "DevOps"
    Account:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "MIPT"
        password:
          type: string
          example: "qwerty"
    Sites:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          example: "https://habr.com/ru/articles/"